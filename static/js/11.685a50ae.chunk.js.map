{"version":3,"sources":["redux/website/website.actions.ts","images/developer.png","react/Components/AboutMeContainer/AboutMe/AboutMe.component.tsx","react/Components/helpers.ts","react/Components/Buttons/MenuButton.component.tsx","redux/email/email.actions.ts","react/Components/AboutMeContainer/ContactMe/ContactMe.component.tsx","react/Components/AboutMeContainer/AboutModal/AboutModal.component.tsx"],"names":["actionsCreators","Object","freeze","toggleLightMode","type","WebsiteActionTypes","TOGGLE_LIGHT_MODE","toggleAboutModalVisible","TOGGLE_ABOUT_MODAL_VISIBLE","setPageLoading","SET_PAGE_LOADING","removePageLoading","REMOVE_PAGE_LOADING","changeLanguage","language","CHANGE_LANGUAGE","module","exports","memo","age","moment","diff","xs","sm","md","className","src","require","alt","id","href","target","rel","validadeName","name","regex","find","e","test","onClick","children","align","justify","tabIndex","role","aria-roledescription","sendEmail","values","EmailActionTypes","SEND_EMAIL","sentEmailSuccess","EMAIL_SUCCESS","sentEmailFail","error","EMAIL_FAIL","sendConfirmationEmail","SEND_CONFIRMATION_EMAIL","sentConfirmationEmailSuccess","CONFIRMATION_EMAIL_SUCCESS","sentConfirmationEmailFail","CONFIRMATION_EMAIL_FAIL","Item","Form","dispatch","useDispatch","useForm","form","useEffect","resetFields","websiteActions","onChange","field","value","setFieldsValue","sendFeedback","variables","window","emailjs","send","then","emailActions","catch","err","onFinish","ReactGA","event","category","action","rules","required","message","validator","rule","invalidLengthMessage","invalidNameMessage","length","Promise","reject","resolve","checkName","invalidEmailMessage","email","validateEmail","checkEmail","checkMessage","TextArea","rows","submit","intl","useIntl","useSelector","Website","Email","visible","aboutModalVisible","theme","pageLoading","emailError","emailValues","emailErrorValue","handleFirstMessageFail","handleFirstMessageSuccess","notification","success","formatMessage","duration","description","status","onCancel","footer","width","wrapClassName","maskClosable","spinning"],"mappings":"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","file":"static/js/11.685a50ae.chunk.js","sourcesContent":["import { ValueOf } from \"../../global\";\nimport WebsiteActionTypes from \"./website.types\";\n\nconst toggleLightMode = () => ({\n  type: WebsiteActionTypes.TOGGLE_LIGHT_MODE\n});\n\nconst toggleAboutModalVisible = () => ({\n  type: WebsiteActionTypes.TOGGLE_ABOUT_MODAL_VISIBLE\n});\n\nconst setPageLoading = () => ({\n  type: WebsiteActionTypes.SET_PAGE_LOADING\n});\n\nconst removePageLoading = () => ({\n  type: WebsiteActionTypes.REMOVE_PAGE_LOADING\n});\n\nconst changeLanguage = (language: string) => ({\n  type: WebsiteActionTypes.CHANGE_LANGUAGE,\n  language\n});\n\n// ********************************************************\n\nconst actionsCreators = Object.freeze({\n  toggleLightMode,\n  toggleAboutModalVisible,\n  setPageLoading,\n  removePageLoading,\n  changeLanguage\n});\n\nexport type ActionsCreators = ReturnType<ValueOf<typeof actionsCreators>>;\nexport default actionsCreators;\n","module.exports = __webpack_public_path__ + \"static/media/developer.aec33a6c.png\";","import { Col, Row } from \"antd\";\nimport React, { memo } from \"react\";\nimport { FormattedMessage } from \"react-intl\";\nimport LazyLoad from \"react-lazyload\";\nimport moment from \"moment\";\n\nfunction AboutMe() {\n  const age = moment().diff(\"1995-01-12\", \"years\");\n  return (\n    <Row>\n      <Col xs={24} sm={24} md={10}>\n        <LazyLoad>\n          <img\n            className=\"developer\"\n            src={require(\"../../../../images/developer.png\")}\n            alt=\"\"\n          />\n        </LazyLoad>\n      </Col>\n      <Col xs={24} sm={24} md={14} className=\"aboutTextContainer\">\n        <p>\n          <FormattedMessage id=\"about.text01\" /> {age}\n          <FormattedMessage id=\"about.text02\" />\n        </p>\n        <p>\n          <FormattedMessage id=\"about.text03\" />{\" \"}\n          <a\n            href=\"https://en.wavecom.pt/\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Wavecom\n          </a>\n          <FormattedMessage id=\"about.text04\" />\n        </p>\n        <p>\n          <FormattedMessage id=\"about.text05\" />\n        </p>\n        <p>\n          <FormattedMessage id=\"about.text06\" />\n        </p>\n      </Col>\n    </Row>\n  );\n}\n\nexport default memo(AboutMe);\n","import { ReactNode } from \"react\";\nexport const checkName = (\n  rule: object,\n  value: string,\n  invalidLengthMessage: ReactNode,\n  invalidNameMessage: ReactNode\n) => {\n  if (value?.length < 3) {\n    return Promise.reject(invalidLengthMessage);\n  }\n  if (value && validadeName(value)) {\n    return Promise.reject(invalidNameMessage);\n  } else {\n    return Promise.resolve();\n  }\n};\n\nexport const validadeName = (name: string) => {\n  const regex = /^[a-z ,.'-]+$/g;\n\n  if (typeof name === \"object\") {\n    const result = (name as Array<string>).find((e: string) => !regex.test(e));\n    return result ? true : false;\n  }\n\n  return !regex.test(name);\n};\n\nexport const validateEmail = (email: string) => {\n  const regex = /^(([^<>()[\\]\\\\.,;:\\s@]+(\\.[^<>()[\\]\\\\.,;:\\s@]+)*)|(.+))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3})|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n\n  if (typeof email === \"object\") {\n    const result = (email as Array<string>).find((e: string) => !regex.test(e));\n    return result ? true : false;\n  }\n\n  return !regex.test(email);\n};\n\nexport const checkEmail = (\n  rule: object,\n  value: string,\n  invalidEmailMessage: ReactNode\n) => {\n  if (value && validateEmail(value)) {\n    return Promise.reject(invalidEmailMessage);\n  } else {\n    return Promise.resolve();\n  }\n};\n\nexport const checkMessage = (\n  rule: object,\n  value: string,\n  invalidLengthMessage: ReactNode\n) => {\n  if (value?.length < 3) {\n    return Promise.reject(invalidLengthMessage);\n  } else {\n    return Promise.resolve();\n  }\n};\n","import React, { PropsWithChildren, memo } from \"react\";\nimport { ExplicitAny } from \"../../../global\";\nimport { Row } from \"antd\";\n\n/**\n * Button to start the game, by redirecting to the /game location\n */\n\ninterface MenuButtonProps {\n  className?: string;\n  onClick: ExplicitAny;\n}\n\nfunction MenuButton({\n  className,\n  onClick,\n  children\n}: PropsWithChildren<MenuButtonProps>) {\n  return (\n    <Row className=\"buttonSpaceRow\" align=\"middle\" justify=\"center\">\n      <div\n        tabIndex={0}\n        role=\"button\"\n        aria-roledescription=\"animatedButton\"\n        className={`animatedButton divButton ${className}`}\n        onClick={onClick}\n      >\n        {children}\n      </div>\n    </Row>\n  );\n}\n\nexport default memo(MenuButton);\n","import EmailActionTypes from \"./email.types\";\nimport { Store } from \"antd/lib/form/interface\";\nimport { ValueOf } from \"../../global\";\n\nconst sendEmail = (values: Store) => ({\n  type: EmailActionTypes.SEND_EMAIL,\n  values\n});\n\nconst sentEmailSuccess = () => ({\n  type: EmailActionTypes.EMAIL_SUCCESS\n});\n\nconst sentEmailFail = (error: Error) => ({\n  type: EmailActionTypes.EMAIL_FAIL,\n  error\n});\n\nconst sendConfirmationEmail = () => ({\n  type: EmailActionTypes.SEND_CONFIRMATION_EMAIL\n});\n\nconst sentConfirmationEmailSuccess = () => ({\n  type: EmailActionTypes.CONFIRMATION_EMAIL_SUCCESS\n});\n\nconst sentConfirmationEmailFail = () => ({\n  type: EmailActionTypes.CONFIRMATION_EMAIL_FAIL\n});\n\n// ********************************************************\n\nconst actionsCreators = Object.freeze({\n  sendEmail,\n  sentEmailSuccess,\n  sentEmailFail,\n  sendConfirmationEmail,\n  sentConfirmationEmailSuccess,\n  sentConfirmationEmailFail\n});\n\nexport type ActionsCreators = ReturnType<ValueOf<typeof actionsCreators>>;\nexport default actionsCreators;\n","import { Form, Input, Row } from \"antd\";\nimport React, { memo, useEffect } from \"react\";\nimport { checkEmail, checkMessage, checkName } from \"../../helpers\";\nimport { FormattedMessage } from \"react-intl\";\nimport MenuButton from \"../../Buttons/MenuButton.component\";\nimport ReactGA from \"react-ga\";\nimport { Store } from \"antd/lib/form/interface\";\nimport emailActions from \"../../../../redux/email/email.actions\";\nimport { useDispatch } from \"react-redux\";\nimport websiteActions from \"../../../../redux/website/website.actions\";\n\nconst { Item } = Form;\n\ninterface EmailJSWindow {\n  emailjs: {\n    send: (\n      email: string,\n      template: string,\n      variables: Store\n    ) => Promise<object>;\n  };\n}\n\ntype NewWindow = Window & typeof globalThis & EmailJSWindow;\n\nfunction ContactMe() {\n  const dispatch = useDispatch();\n  const [form] = Form.useForm();\n\n  const mountComponent = () => {\n    form.resetFields();\n    dispatch(websiteActions.removePageLoading());\n  };\n  useEffect(mountComponent, []);\n\n  const onSubmit = (values: Store) => {\n    ReactGA.event({\n      category: \"Contact Me\",\n      action: \"send message\"\n    });\n    dispatch(websiteActions.setPageLoading());\n    dispatch(emailActions.sendEmail(values));\n    sendFeedback(values);\n  };\n\n  const onChange = (\n    { target: { value } }: { target: { value: string } },\n    field: string\n  ) => {\n    form.setFieldsValue({ [field]: value });\n  };\n\n  const sendFeedback = (variables: Store) => {\n    (window as NewWindow).emailjs\n      .send(\"outlook\", \"portfolio\", variables)\n      .then(() => {\n        dispatch(emailActions.sentEmailSuccess());\n      })\n      // Handle errors here however you like, or use a React error boundary\n      .catch((err: Error) => {\n        dispatch(emailActions.sentEmailFail(err));\n      });\n  };\n\n  return (\n    <>\n      <Form\n        name=\"loginForm\"\n        className=\"contactMe\"\n        onFinish={onSubmit}\n        form={form}\n      >\n        <Item\n          name=\"name\"\n          rules={[\n            {\n              required: true,\n              message: <FormattedMessage id=\"contact.required.name\" />\n            },\n            {\n              validator: (rule: object, value: string) =>\n                checkName(\n                  rule,\n                  value,\n                  <FormattedMessage id=\"contact.invalid.length\" />,\n                  <FormattedMessage id=\"contact.invalid.name\" />\n                )\n            }\n          ]}\n        >\n          <Row align=\"middle\" justify=\"center\">\n            <Input\n              className=\"formInputAnimated formInput\"\n              onChange={e => onChange(e, \"name\")}\n            />\n            <label className=\"labelPlaceholder\">\n              <FormattedMessage id=\"contact.name\" />\n            </label>\n          </Row>\n        </Item>\n        <Item\n          name=\"email\"\n          rules={[\n            {\n              required: true,\n              message: <FormattedMessage id=\"contact.required.email\" />\n            },\n            {\n              validator: (rule: object, value: string) =>\n                checkEmail(\n                  rule,\n                  value,\n                  <FormattedMessage id=\"contact.invalid.email\" />\n                )\n            }\n          ]}\n        >\n          <Row align=\"middle\" justify=\"center\">\n            <Input\n              className=\"formInputAnimated formInput\"\n              onChange={e => onChange(e, \"email\")}\n            />\n            <label className=\"labelPlaceholder\">\n              <FormattedMessage id=\"contact.email\" />\n            </label>\n          </Row>\n        </Item>\n        <Item\n          name=\"message\"\n          rules={[\n            {\n              required: true,\n              message: <FormattedMessage id=\"contact.required.message\" />\n            },\n            {\n              validator: (rule: object, value: string) =>\n                checkMessage(\n                  rule,\n                  value,\n                  <FormattedMessage id=\"contact.invalid.length\" />\n                )\n            }\n          ]}\n        >\n          <Row align=\"middle\" justify=\"center\">\n            <Input.TextArea\n              rows={4}\n              className=\"formInputAnimated formInput formMessage\"\n              onChange={e => onChange(e, \"message\")}\n            />\n            <label className=\"labelPlaceholder\">\n              <FormattedMessage id=\"contact.message\" />\n            </label>\n          </Row>\n        </Item>\n\n        <Row align=\"middle\" justify=\"center\">\n          <MenuButton\n            onClick={() => form.submit()}\n            className=\"submitButtonAnimated\"\n          >\n            <span>\n              <FormattedMessage id=\"contact.submit\" />\n            </span>\n          </MenuButton>\n        </Row>\n      </Form>\n      <span className=\"contactMeBehind\">\n        <FormattedMessage id=\"contact.title\" />\n      </span>\n    </>\n  );\n}\n\nexport default memo(ContactMe);\n","/* eslint-disable react-hooks/exhaustive-deps */\nimport { Col, Modal, Row, Spin, notification } from \"antd\";\nimport React, { memo, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport AboutMe from \"../AboutMe/AboutMe.component\";\nimport ContactMe from \"../ContactMe/ContactMe.component\";\nimport { RootReducerState } from \"../../../../global\";\nimport { Store } from \"antd/lib/form/interface\";\nimport { useIntl } from \"react-intl\";\nimport websiteActions from \"../../../../redux/website/website.actions\";\n\ninterface EmailJSWindow {\n  emailjs: {\n    send: (\n      email: string,\n      template: string,\n      variables: Store\n    ) => Promise<object>;\n  };\n}\n\ntype NewWindow = Window & typeof globalThis & EmailJSWindow;\n\nfunction AboutModal() {\n  const dispatch = useDispatch();\n  const intl = useIntl();\n\n  const {\n    visible,\n    theme,\n    pageLoading,\n    emailError,\n    emailValues,\n    emailErrorValue\n  } = useSelector(({ Website, Email }: RootReducerState) => ({\n    visible: Website.aboutModalVisible,\n    theme: Website.theme,\n    pageLoading: Website.pageLoading,\n    emailError: Email.emailError,\n    emailValues: Email.values,\n    emailErrorValue: Email.emailErrorValue\n  }));\n\n  const closeModal = () => {\n    dispatch(websiteActions.toggleAboutModalVisible());\n  };\n\n  useEffect(() => {\n    if (pageLoading) {\n      if (emailError) {\n        handleFirstMessageFail(emailErrorValue);\n      } else if (emailError === false) {\n        handleFirstMessageSuccess();\n      }\n    }\n  }, [emailError]);\n\n  const handleFirstMessageSuccess = () => {\n    notification.success({\n      message: intl.formatMessage({ id: \"contact.success\" }),\n      duration: 5\n    });\n    dispatch(websiteActions.toggleAboutModalVisible());\n    dispatch(websiteActions.removePageLoading());\n    sendConfirmationEmail(emailValues);\n  };\n\n  const handleFirstMessageFail = (err: Error & { status: number }) => {\n    notification.error({\n      message: intl.formatMessage({ id: \"contact.error.message1\" }),\n      description: err?.status ? (\n        <span>\n          {intl.formatMessage({ id: \"contact.error.message2\" })}\n          {err.status}\n        </span>\n      ) : null,\n      duration: 5\n    });\n    dispatch(websiteActions.removePageLoading());\n  };\n\n  const sendConfirmationEmail = (variables: Store) => {\n    (window as NewWindow).emailjs\n      .send(\"outlook\", \"portfolio\", variables)\n      // Handle errors here however you like, or use a React error boundary\n      .catch((err: Error & { status: number }) => {\n        notification.error({\n          message: intl.formatMessage({ id: \"contact.error.message3\" }),\n          description: err.status ? (\n            <span>\n              {intl.formatMessage({ id: \"contact.error.message2\" })}\n              {err.status}\n            </span>\n          ) : null,\n          duration: 5\n        });\n      });\n  };\n\n  return visible ? (\n    <Modal\n      visible\n      onCancel={() => (pageLoading ? null : closeModal())}\n      footer={null}\n      width={\"80%\"}\n      wrapClassName=\"react-portifolio\"\n      maskClosable={false}\n    >\n      <Spin spinning={pageLoading}>\n        <Row className={`aboutModalContainer ${theme}`}>\n          <Col className=\"aboutMeCol\" xs={24} sm={24} md={14}>\n            <AboutMe />\n          </Col>\n\n          <Col className=\"contactMeCol\" xs={24} sm={24} md={10}>\n            <ContactMe />\n          </Col>\n        </Row>\n      </Spin>\n    </Modal>\n  ) : null;\n}\n\nexport default memo(AboutModal);\n"],"sourceRoot":""}