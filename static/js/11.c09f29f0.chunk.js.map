{"version":3,"sources":["redux/website/website.actions.ts","images/developer.png","react/Components/AboutMeContainer/AboutMe/AboutMe.component.tsx","react/Components/helpers.ts","react/Components/Buttons/MenuButton.component.tsx","redux/email/email.actions.ts","react/Components/AboutMeContainer/ContactMe/ContactMe.component.tsx","react/Components/AboutMeContainer/AboutModal/AboutModal.component.tsx"],"names":["actionsCreators","Object","freeze","toggleLightMode","type","WebsiteActionTypes","TOGGLE_LIGHT_MODE","toggleAboutModalVisible","TOGGLE_ABOUT_MODAL_VISIBLE","setPageLoading","SET_PAGE_LOADING","removePageLoading","REMOVE_PAGE_LOADING","changeLanguage","language","CHANGE_LANGUAGE","module","exports","AboutMe","age","moment","diff","xs","sm","md","className","src","require","alt","id","href","target","rel","validadeName","name","regex","find","e","test","MenuButton","onClick","children","align","justify","tabIndex","role","aria-roledescription","sendEmail","values","EmailActionTypes","SEND_EMAIL","sentEmailSuccess","EMAIL_SUCCESS","sentEmailFail","error","EMAIL_FAIL","sendConfirmationEmail","SEND_CONFIRMATION_EMAIL","sentConfirmationEmailSuccess","CONFIRMATION_EMAIL_SUCCESS","sentConfirmationEmailFail","CONFIRMATION_EMAIL_FAIL","Item","Form","ContactMe","dispatch","useDispatch","useForm","form","useEffect","resetFields","websiteActions","onChange","field","value","setFieldsValue","sendFeedback","variables","window","emailjs","send","then","res","emailActions","catch","err","onFinish","rules","required","message","validator","rule","callback","invalidLengthMessage","invalidNameMessage","lenght","checkName","invalidEmailMessage","email","validateEmail","checkEmail","checkMessage","TextArea","rows","submit","AboutModal","useSelector","Website","Email","visible","aboutModalVisible","theme","pageLoading","emailError","emailValues","emailErrorValue","handleFirstMessageSuccess","handleFirstMessageFail","notification","success","duration","description","status","onCancel","footer","width","wrapClassName","maskClosable","spinning"],"mappings":"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","file":"static/js/11.c09f29f0.chunk.js","sourcesContent":["import { ValueOf } from \"../../global\";\nimport WebsiteActionTypes from \"./website.types\";\n\nconst toggleLightMode = () => ({\n  type: WebsiteActionTypes.TOGGLE_LIGHT_MODE\n});\n\nconst toggleAboutModalVisible = () => ({\n  type: WebsiteActionTypes.TOGGLE_ABOUT_MODAL_VISIBLE\n});\n\nconst setPageLoading = () => ({\n  type: WebsiteActionTypes.SET_PAGE_LOADING\n});\n\nconst removePageLoading = () => ({\n  type: WebsiteActionTypes.REMOVE_PAGE_LOADING\n});\n\nconst changeLanguage = (language: string) => ({\n  type: WebsiteActionTypes.CHANGE_LANGUAGE,\n  language\n});\n\n// ********************************************************\n\nconst actionsCreators = Object.freeze({\n  toggleLightMode,\n  toggleAboutModalVisible,\n  setPageLoading,\n  removePageLoading,\n  changeLanguage\n});\n\nexport type ActionsCreators = ReturnType<ValueOf<typeof actionsCreators>>;\nexport default actionsCreators;\n","module.exports = __webpack_public_path__ + \"static/media/developer.aec33a6c.png\";","import { Col, Row } from \"antd\";\nimport { FormattedMessage } from \"react-intl\";\nimport React from \"react\";\nimport moment from \"moment\";\nimport LazyLoad from \"react-lazyload\";\n\nfunction AboutMe() {\n  var age = moment().diff(\"1995-01-12\", \"years\");\n  return (\n    <Row>\n      <Col xs={24} sm={24} md={10}>\n        <LazyLoad>\n          <img\n            className=\"developer\"\n            src={require(\"../../../../images/developer.png\")}\n            alt=\"\"\n          />\n        </LazyLoad>\n      </Col>\n      <Col xs={24} sm={24} md={14} className=\"aboutTextContainer\">\n        <p>\n          <FormattedMessage id=\"about.text01\" /> {age}\n          <FormattedMessage id=\"about.text02\" />\n        </p>\n        <p>\n          <FormattedMessage id=\"about.text03\" />{\" \"}\n          <a\n            href=\"https://en.wavecom.pt/\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Wavecom\n          </a>\n          <FormattedMessage id=\"about.text04\" />\n        </p>\n        <p>\n          <FormattedMessage id=\"about.text05\" />\n        </p>\n        <p>\n          <FormattedMessage id=\"about.text06\" />\n        </p>\n      </Col>\n    </Row>\n  );\n}\n\nexport default AboutMe;\n","import { ReactNode } from \"react\";\nexport const checkName = (\n  rule: object,\n  value: any,\n  callback: (message?: string) => void,\n  invalidLengthMessage: ReactNode,\n  invalidNameMessage: ReactNode\n) => {\n  if (value.lenght < 3) {\n    callback(invalidLengthMessage as string);\n  }\n  if (value && validadeName(value)) {\n    callback(invalidNameMessage as string);\n  } else {\n    callback();\n  }\n};\n\nexport const validadeName = (name: any) => {\n  const regex = /^[0-9A-Za-z!@#$%&*()_\\-+={[}\\]|:;\"'<,>.?/\\\\~`]+[0-9A-Za-z!@#$%&*()_\\-+={[}\\]|:;\"'<,>.?/\\\\~`]*$/g;\n\n  if (typeof name === \"object\") {\n    const result = name.find((e: string) => !regex.test(e));\n    return result ? true : false;\n  }\n\n  return !regex.test(name);\n};\n\nexport const validateEmail = (email: any) => {\n  const regex = /^(([^<>()[\\]\\\\.,;:\\s@]+(\\.[^<>()[\\]\\\\.,;:\\s@]+)*)|(.+))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3})|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n\n  if (typeof email === \"object\") {\n    const result = email.find((e: string) => !regex.test(e));\n    return result ? true : false;\n  }\n\n  return !regex.test(email);\n};\n\nexport const checkEmail = (\n  rule: object,\n  value: string,\n  callback: (message?: string) => void,\n  invalidEmailMessage: ReactNode\n) => {\n  if (value && validateEmail(value)) {\n    callback(invalidEmailMessage as string);\n  } else {\n    callback();\n  }\n};\n\nexport const checkMessage = (\n  rule: object,\n  value: any,\n  callback: (message?: string) => void,\n  invalidLengthMessage: ReactNode\n) => {\n  if (value.lenght < 3) {\n    callback(invalidLengthMessage as string);\n  } else {\n    callback();\n  }\n};\n","import React, { PropsWithChildren } from \"react\";\nimport { ExplicitAny } from \"../../../global\";\nimport { Row } from \"antd\";\n\n/**\n * Button to start the game, by redirecting to the /game location\n */\n\ninterface MenuButtonProps {\n  className?: string;\n  onClick: ExplicitAny;\n}\n\nfunction MenuButton({\n  className,\n  onClick,\n  children\n}: PropsWithChildren<MenuButtonProps>) {\n  return (\n    <Row className=\"buttonSpaceRow\" align=\"middle\" justify=\"center\">\n      <div\n        tabIndex={0}\n        role=\"button\"\n        aria-roledescription=\"animatedButton\"\n        className={`animatedButton divButton ${className}`}\n        onClick={onClick}\n      >\n        {children}\n      </div>\n    </Row>\n  );\n}\n\nexport default MenuButton;\n","import { ValueOf } from \"../../global\";\nimport EmailActionTypes from \"./email.types\";\n\nconst sendEmail = (values: any) => ({\n  type: EmailActionTypes.SEND_EMAIL,\n  values\n});\n\nconst sentEmailSuccess = () => ({\n  type: EmailActionTypes.EMAIL_SUCCESS\n});\n\nconst sentEmailFail = (error: any) => ({\n  type: EmailActionTypes.EMAIL_FAIL,\n  error\n});\n\nconst sendConfirmationEmail = () => ({\n  type: EmailActionTypes.SEND_CONFIRMATION_EMAIL\n});\n\nconst sentConfirmationEmailSuccess = () => ({\n  type: EmailActionTypes.CONFIRMATION_EMAIL_SUCCESS\n});\n\nconst sentConfirmationEmailFail = () => ({\n  type: EmailActionTypes.CONFIRMATION_EMAIL_FAIL\n});\n\n// ********************************************************\n\nconst actionsCreators = Object.freeze({\n  sendEmail,\n  sentEmailSuccess,\n  sentEmailFail,\n  sendConfirmationEmail,\n  sentConfirmationEmailSuccess,\n  sentConfirmationEmailFail\n});\n\nexport type ActionsCreators = ReturnType<ValueOf<typeof actionsCreators>>;\nexport default actionsCreators;\n","import { Input, Form, Row } from \"antd\";\nimport { checkName, checkEmail, checkMessage } from \"../../helpers\";\nimport { FormattedMessage } from \"react-intl\";\nimport MenuButton from \"../../Buttons/MenuButton.component\";\nimport React, { useEffect } from \"react\";\nimport emailActions from \"../../../../redux/email/email.actions\";\nimport { useDispatch } from \"react-redux\";\nimport websiteActions from \"../../../../redux/website/website.actions\";\n\nconst { Item } = Form;\n\nfunction ContactMe() {\n  const dispatch = useDispatch();\n  const [form] = Form.useForm();\n\n  const mountComponent = () => {\n    form.resetFields();\n    dispatch(websiteActions.removePageLoading());\n  };\n  useEffect(mountComponent, []);\n\n  const onSubmit = (values: any) => {\n    dispatch(websiteActions.setPageLoading());\n    dispatch(emailActions.sendEmail(values));\n    sendFeedback(values);\n  };\n\n  const onChange = (\n    { target: { value } }: { target: { value: string } },\n    field: string\n  ) => {\n    form.setFieldsValue({ [field]: value });\n  };\n\n  const sendFeedback = (variables: any) => {\n    (window as any).emailjs\n      .send(\"outlook\", \"portfolio\", variables)\n      .then((res: any) => {\n        dispatch(emailActions.sentEmailSuccess());\n      })\n      // Handle errors here however you like, or use a React error boundary\n      .catch((err: any) => {\n        dispatch(emailActions.sentEmailFail(err));\n      });\n  };\n\n  return (\n    <>\n      <Form\n        name=\"loginForm\"\n        className=\"contactMe\"\n        onFinish={onSubmit}\n        form={form}\n      >\n        <Row align=\"middle\" justify=\"center\">\n          <Item\n            name=\"name\"\n            rules={[\n              {\n                required: true,\n                message: <FormattedMessage id=\"contact.required.name\" />\n              },\n              {\n                validator: (\n                  rule: object,\n                  value: string,\n                  callback: (message?: string) => void\n                ) =>\n                  checkName(\n                    rule,\n                    value,\n                    callback,\n                    <FormattedMessage id=\"contact.invalid.length\" />,\n                    <FormattedMessage id=\"contact.invalid.name\" />\n                  )\n              }\n            ]}\n          >\n            <Input\n              className=\"formInputAnimated formInput\"\n              onChange={(e: any) => onChange(e, \"name\")}\n            />\n            <label className=\"labelPlaceholder\">\n              <FormattedMessage id=\"contact.name\" />\n            </label>\n          </Item>\n        </Row>\n        <Row align=\"middle\" justify=\"center\">\n          <Item\n            name=\"email\"\n            rules={[\n              {\n                required: true,\n                message: <FormattedMessage id=\"contact.required.email\" />\n              },\n              {\n                validator: (\n                  rule: object,\n                  value: string,\n                  callback: (message?: string) => void\n                ) =>\n                  checkEmail(\n                    rule,\n                    value,\n                    callback,\n                    <FormattedMessage id=\"contact.invalid.email\" />\n                  )\n              }\n            ]}\n          >\n            <Input\n              className=\"formInputAnimated formInput\"\n              onChange={(e: any) => onChange(e, \"email\")}\n            />\n            <label className=\"labelPlaceholder\">\n              <FormattedMessage id=\"contact.email\" />\n            </label>\n          </Item>\n        </Row>\n        <Row align=\"middle\" justify=\"center\">\n          <Item\n            name=\"message\"\n            rules={[\n              {\n                required: true,\n                message: <FormattedMessage id=\"contact.required.message\" />\n              },\n              {\n                validator: (\n                  rule: object,\n                  value: string,\n                  callback: (message?: string) => void\n                ) =>\n                  checkMessage(\n                    rule,\n                    value,\n                    callback,\n                    <FormattedMessage id=\"contact.invalid.length\" />\n                  )\n              }\n            ]}\n          >\n            <Input.TextArea\n              rows={4}\n              className=\"formInputAnimated formInput formMessage\"\n              onChange={(e: any) => onChange(e, \"message\")}\n            />\n            <label className=\"labelPlaceholder\">\n              <FormattedMessage id=\"contact.message\" />\n            </label>\n          </Item>\n        </Row>\n\n        <Row align=\"middle\" justify=\"center\">\n          <MenuButton\n            onClick={() => form.submit()}\n            className=\"submitButtonAnimated\"\n          >\n            <span>\n              <FormattedMessage id=\"contact.submit\" />\n            </span>\n          </MenuButton>\n        </Row>\n      </Form>\n      <span className=\"contactMeBehind\">\n        <FormattedMessage id=\"contact.title\" />\n      </span>\n    </>\n  );\n}\n\nexport default ContactMe;\n","/* eslint-disable react-hooks/exhaustive-deps */\nimport { Col, Modal, Row, Spin, notification } from \"antd\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport AboutMe from \"../AboutMe/AboutMe.component\";\nimport ContactMe from \"../ContactMe/ContactMe.component\";\nimport { FormattedMessage } from \"react-intl\";\nimport LazyLoad from \"react-lazyload\";\nimport React, { useEffect } from \"react\";\nimport { RootReducerState } from \"../../../../global\";\nimport websiteActions from \"../../../../redux/website/website.actions\";\n\nfunction AboutModal() {\n  const dispatch = useDispatch();\n\n  const {\n    visible,\n    theme,\n    pageLoading,\n    emailError,\n    emailValues,\n    emailErrorValue\n  } = useSelector(({ Website, Email }: RootReducerState) => ({\n    visible: Website.aboutModalVisible,\n    theme: Website.theme,\n    pageLoading: Website.pageLoading,\n    emailError: Email.emailError,\n    emailValues: Email.values,\n    emailErrorValue: Email.emailErrorValue\n  }));\n\n  const closeModal = () => {\n    dispatch(websiteActions.toggleAboutModalVisible());\n  };\n\n  useEffect(() => {\n    if (pageLoading) {\n      if (emailError) {\n        handleFirstMessageSuccess();\n      } else if (emailError === false) {\n        handleFirstMessageFail(emailErrorValue);\n      }\n    }\n  }, [emailError]);\n\n  const handleFirstMessageSuccess = () => {\n    notification.success({\n      message: <FormattedMessage id=\"contact.success\" />,\n      duration: 5\n    });\n    dispatch(websiteActions.toggleAboutModalVisible());\n    dispatch(websiteActions.removePageLoading());\n    sendConfirmationEmail(emailValues);\n  };\n\n  const handleFirstMessageFail = (err: any) => {\n    notification.error({\n      message: <FormattedMessage id=\"contact.error.message1\" />,\n      description: err?.status ? (\n        <span>\n          <FormattedMessage id=\"contact.error.message2\" />\n          {err.status}\n        </span>\n      ) : null,\n      duration: 5\n    });\n    dispatch(websiteActions.removePageLoading());\n  };\n\n  const sendConfirmationEmail = (variables: any) => {\n    (window as any).emailjs\n      .send(\"outlook\", \"portfolio\", variables)\n      // Handle errors here however you like, or use a React error boundary\n      .catch((err: any) => {\n        notification.error({\n          message: <FormattedMessage id=\"contact.error.message3\" />,\n          description: err.status ? (\n            <span>\n              <FormattedMessage id=\"contact.error.message2\" />\n              {err.status}\n            </span>\n          ) : null,\n          duration: 5\n        });\n      });\n  };\n\n  return visible ? (\n    <LazyLoad>\n      <Modal\n        visible\n        onCancel={closeModal}\n        footer={null}\n        width={\"80%\"}\n        wrapClassName=\"react-portifolio\"\n        maskClosable={false}\n      >\n        <Spin spinning={pageLoading}>\n          <Row className={`aboutModalContainer ${theme}`}>\n            <Col className=\"aboutMeCol\" xs={24} sm={24} md={14}>\n              <AboutMe />\n            </Col>\n\n            <Col className=\"contactMeCol\" xs={24} sm={24} md={10}>\n              <ContactMe />\n            </Col>\n          </Row>\n        </Spin>\n      </Modal>\n    </LazyLoad>\n  ) : null;\n}\n\nexport default AboutModal;\n"],"sourceRoot":""}